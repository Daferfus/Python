#-----------------------------------------------------------------------------------------------------------
# Comprehension Est√°ndar
#-----------------------------------------------------------------------------------------------------------
valores = [2, 5, 12, 10]

# Manera tradicional
resultado = []
for i in valores:
  resultado.append(i * 2)
print(resultado)

# Ejemplo con map
resultado = map(lambda i : i * 2, valores)
print(list(resultado)) 

# Ejemplo con comprehension
resultado = [i * 2 for i in valores]
print(resultado)
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------------------------
# Mezcla de Map y Filter
#-----------------------------------------------------------------------------------------------------------
lista = [14, 5, 12, 16, 9, 7, 10]

nueva = [x for x in lista if x % 2 == 0]
print(nueva)


lista = [14, 5, 12, 16, 9, 7, 10]

nueva = [ x if x % 2 == 0 else 0 for x in lista ]
print(nueva)
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------


#-----------------------------------------------------------------------------------------------------------
# Matrices
#-----------------------------------------------------------------------------------------------------------
traspuesta = []
matriz = [[1, 2, 3, 4], [4, 5, 6, 8]]

for i in range(len(matriz[0])): #range(4)
    fila_traspuesta = []

    for fila in matriz:
        fila_traspuesta.append(fila[i])
    traspuesta.append(fila_traspuesta)

print(traspuesta)

matriz = [[1, 2, 3, 4], [4, 5, 6, 8]]
traspuesta = [[ fila[i] for fila in matriz] for i in range(len(matriz[0]))]
print(traspuesta)
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------