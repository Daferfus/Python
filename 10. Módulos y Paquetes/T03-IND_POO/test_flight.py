######################################
#       David Fernández Fuster       #
#       13/03/2021                   #
######################################
#-----------------------------------------------------------------------------------------------------------
# Módulos
#-----------------------------------------------------------------------------------------------------------
import unittest
from flight import Flight
from aircraft import Aircraft
from passenger import Passenger
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------

class Pruebas(unittest.TestCase):

    #-----------------------------------------------------------------------------------------------------------
    # Tests de Funcionalidades
    #-----------------------------------------------------------------------------------------------------------
    def test_flight_instance(self):
        f1 = Flight(number = "BA117", aircraft = Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))
        self.assertIsInstance(f1, Flight)
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------    
    
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_allocate_passenger(self):
        f1 = Flight(number = "BA117", aircraft = Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))
        p1 = Passenger(name = "Jack", surname = "Shephard", id_card = "85994003S")
        
        f1.allocate_passenger("12A", p1.passenger_data())

        row = f1._Flight__seating[12]
        value = row["A"]

        self.assertEqual(value, p1.passenger_data())
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_reallocate_passenger(self):
        f1 = Flight(number = "BA117", aircraft = Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))        
        p1 = Passenger(name = "Jack", surname = "Shephard", id_card = "85994003S")
        
        f1.allocate_passenger("12A", p1.passenger_data())
        f1.reallocate_passenger("12A", "4D")
        
        row = f1._Flight__seating[4]
        value = row["D"]
                        
        self.assertEqual(value, p1.passenger_data())
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------

    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_num_available_seats(self):
        f1 = Flight(number = "BA117", aircraft = Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))
        self.assertEqual(f1.num_available_seats(), 132)
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------


    #-----------------------------------------------------------------------------------------------------------
    # Tests de Excepciones
    #-----------------------------------------------------------------------------------------------------------
    def test_exception_flight_instace(self):
        self.assertRaisesRegex(ValueError, "El número asignado no cumple con los requisitos establecidos de dos letras mayuscula y número menor que 9999.", Flight, "A", Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------

    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_exception_parse_seat(self):
        f1 = Flight(number = "BA117", aircraft = Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))
        self.assertRaisesRegex(ValueError, "El asiento no existe o está mal escrito.", f1._Flight__parse_seat, "1")
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------

    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_exception_allocate_passenger(self):
        f1 = Flight(number = "BA117", aircraft = Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))
        p1 = Passenger(name = "Jack", surname = "Shephard", id_card = "85994003S")
        f1.allocate_passenger("12A", p1.passenger_data())
        self.assertRaisesRegex(ValueError, "El asiento no está vacío.", f1.allocate_passenger, "12A", p1.passenger_data())
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------

    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_exception_reallocate_passenger(self):
        f1 = Flight(number = "BA117", aircraft = Aircraft(registration = "G-EUAH", model = "Airbus A319", num_rows = 22, num_seats_per_row=6))
        p1 = Passenger(name = "Jack", surname = "Shephard", id_card = "85994003S")
        self.assertRaisesRegex(ValueError, "El asiento no está ocupado.", f1.reallocate_passenger, "12A", "4D")
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
# class()
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class Suite(unittest.TestSuite):

    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def __init__(self):
        super(Suite, self).__init__()
        self.addTest(Pruebas('test_flight_instance'))      
        self.addTest(Pruebas('test_allocate_passenger'))
        self.addTest(Pruebas('test_reallocate_passenger'))
        self.addTest(Pruebas('test_num_available_seats'))
        self.addTest(Pruebas('test_exception_flight_instace'))
        self.addTest(Pruebas('test_exception_parse_seat'))
        self.addTest(Pruebas('test_exception_allocate_passenger'))
        self.addTest(Pruebas('test_exception_reallocate_passenger'))
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
# class()
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
if __name__ == "__main__":    
    runner = unittest.TextTestRunner()
    my_suite = Suite()
    runner.run(my_suite)
# if()
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------