#-----------------------------------------------------------------------------------------------------------
# Módulos
#-----------------------------------------------------------------------------------------------------------
import unittest
from libro import Libro
from autor import Autor
from examen import mas_antiguos
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------

class Pruebas(unittest.TestCase):

    #-----------------------------------------------------------------------------------------------------------
    # Tests de Funcionalidades
    #-----------------------------------------------------------------------------------------------------------
    def test_libro_instance(self):
        libro1 = Libro(autor = Autor(1, "Miguel", "Cervantes"), titulo = "Don Quijote", anyo = 1941)
        self.assertIsInstance(libro1, Libro)
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------    
    
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_mas_antiguo(self):
        libro1 = Libro(autor = Autor(1, "Miguel", "Cervantes"), titulo = "Don Quijote", anyo = 1941)
        libro2 = Libro(autor = Autor(2, "Julio", "Verne"), titulo = "La Vuelta al Mundo en 80 Días", anyo = 1920)
        lista_de_libros = [libro1, libro2]

        lista_de_titulos_de_libros = list()
        for libro in lista_de_libros:
            if libro.anyo <= 1930:
                lista_de_titulos_de_libros.append(libro.titulo)

        self.assertEqual(lista_de_titulos_de_libros[0], "La Vuelta al Mundo en 80 Días")
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    

    #-----------------------------------------------------------------------------------------------------------
    # Tests de Excepciones
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def test_exception_mas_antiguos(self):
        libro1 = Libro(autor = Autor(1, "Miguel", "Cervantes"), titulo = "Don Quijote", anyo = 1941)
        libro2 = Libro(autor = Autor(2, "Julio", "Verne"), titulo = "La Vuelta al Mundo en 80 Días", anyo = 1920)
        lista_de_libros = [libro1, libro2]
        self.assertRaisesRegex(ValueError, "El anyo de publicación del libro debe de ser entre 1900 y 2021.", mas_antiguos, lista_de_libros, 1700)
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
# class()
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
class Suite(unittest.TestSuite):

    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
    def __init__(self):
        super(Suite, self).__init__()
        self.addTest(Pruebas('test_libro_instance'))      
        self.addTest(Pruebas('test_mas_antiguo'))
        self.addTest(Pruebas('test_exception_mas_antiguos'))
    # ()
    #-----------------------------------------------------------------------------------------------------------
    #-----------------------------------------------------------------------------------------------------------
# class()
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
if __name__ == "__main__":    
    runner = unittest.TextTestRunner()
    my_suite = Suite()
    runner.run(my_suite)
# if()